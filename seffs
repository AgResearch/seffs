#!/usr/bin/env elvish
#
# run seff on all output from sacct, with additional args passed to sacct

use flag
use math
use str

# these units match what ZFS uses
var kibi = 1024
var mebi = (math:pow $kibi 2)
var gibi = (math:pow $kibi 3)
var tebi = (math:pow $kibi 4)

fn sacct-completed-jobs {|days|
  var start-time = (date +%Y-%m-%d -d @(- (date +%s) (* 86400 (- $days 1))))
  # work around the bad SLURM_TIME_FORMAT currently on eRI:
  # /etc/profile.d/nesi.sh:export SLURM_TIME_FORMAT="%b %d %H:%M"
  with E:SLURM_TIME_FORMAT = "%Y-%m-%dT%H:%M:%S" { sacct --json --starttime $start-time } | from-json | keep-if {|job| ==s $job[state][current] COMPLETED } (one)[jobs]
}

fn format-size {|n &p=$false|
  if $p {
    put $n
  } elif (< $n $kibi) {
    put "0"  # so small we don't care
  } elif (< $n $mebi) {
    put (printf "%dK" (math:round (/ $n $kibi)))
  } elif (< $n $gibi) {
    put (printf "%dM" (math:round (/ $n $mebi)))
  } else {
    put (printf "%dG" (math:round (/ $n $gibi)))
  }
}

fn format-seconds {|n &p=$false|
  if $p {
    put $n
  } else {
    var hours = (math:floor (/ $n 3600))
    set n = (- $n (* $hours 3600))
    var mins = (math:floor (/ $n 60))
    var secs = (math:round (- $n (* $mins 60)))

    put (printf "%02d:%02d:%02d" $hours $mins $secs)
  }
}

fn format-timestamp {|epoch-secs &p=false|
  if $p {
    put $epoch-secs
  } else {
    put (date +'%Y-%m-%d %H:%M:%S' -d @$epoch-secs)
 }
}

fn sacct-job-format {|job &p=$false|
  var mem-requested = (* $mebi $job[required][memory])
  var cpus-requested = $job[required][CPUs]
  var step0 = $job[steps][0]
  var max-requested-tres = $step0[tres][requested][max]
  var elapsed = $step0[time][elapsed]
  var start = $step0[time][start]
  var cpu-utilized = $step0[time][total][seconds]

  var mem-used = (put $max-requested-tres | keep-if {|x| ==s $x[type] mem} (all) | each {|tres| put $tres[count] } | put (all) (num 0) | take 1) # 0 is the default
  # var cpu-used = (put $max-requested-tres | keep-if {|x| ==s $x[type] cpu} (all) | each {|tres| put $tres[count] } | put (all) (num 0) | take 1) # 0 is the default
  var mem-efficiency = (math:round (* 100 (/ $mem-used $mem-requested)))
  var cpu-elapsed = (* $cpus-requested $elapsed)
  var cpu-efficiency = (if (> $cpu-elapsed 0) { put (math:round (* 100 (/ $cpu-utilized $cpu-elapsed))) } else { put 0 })

  put [&id=$job[job_id] &user=$job[user] &name=$job[name] &mem-used=(format-size $mem-used &p=$p) &mem-requested=(format-size $mem-requested &p=$p) &mem-efficiency=$mem-efficiency &cpus-requested=$cpus-requested &cpu-utilized=(format-seconds $cpu-utilized) &cpu-efficiency=$cpu-efficiency &start=(format-timestamp $start &p=$p) &wall-clock-time=(format-seconds $elapsed &p=$p)]
}

fn filter-jobs {|&user=$nil &name=$nil|
  put { keep-if {|job| or (eq $user $nil) (str:contains $job[association][user] $user) } | keep-if {|job| or (eq $name $nil) (str:contains $job[name] $name) } }
}

fn values-to-json { var in = [(all)] ; if (== 1 (count $in)) { put $in[0] } else { put $in } | to-json }
fn jtv {|@keys|
   var nu_cmd = (if (> (count $keys) 0) { put 'from json | select -i '(str:join ' ' $keys) } else { put 'from json' })
   nu --no-config-file --no-history --no-std-lib --plugin-config /dev/null --stdin -c $nu_cmd
}
fn tv {|@keys| values-to-json | jtv $@keys }

fn main { |raw-opts|
  var opts = (each {|opt| put [$opt[spec][long] $opt[arg]] } $raw-opts | make-map)
  var all = (has-key $opts all)
  var p = (has-key $opts parsable)
  var user = (if $all { put $nil } elif (has-key $opts user) { put $opts[user] } else { put $E:USER })
  var days = (if (has-key $opts days) { put $opts[days] } else { put 1 })
  var name = (if (has-key $opts name) { put $opts[name] } else { put $nil })

  sacct-completed-jobs $days | (filter-jobs &user=$user &name=$name) | each {|job| sacct-job-format $job &p=$p } | put [(all)] | tv id user name start wall-clock-time mem-requested mem-used mem-efficiency cpus-requested cpu-utilized cpu-efficiency
}

var raw-opts args = (flag:parse-getopt $args [
  [&short=h &long=help]
  [&short=u &long=user &arg-required=$true]
  [&short=a &long=all]
  [&short=n &long=name &arg-required=$true]
  [&short=d &long=days &arg-required=$true]
  [&short=p &long=parsable]
])

main $raw-opts
